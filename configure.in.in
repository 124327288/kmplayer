#AM_INIT_AUTOMAKE(kmplayer,0.8.4-rc4b)

AC_DEFUN([KDE_PKG_CHECK_MODULES], [
  succeeded=no

  if test -z "$PKG_CONFIG"; then
    AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
  fi

  if test "$PKG_CONFIG" != "no" ; then
     PKG_CONFIG_MIN_VERSION=0.9.0
     if $PKG_CONFIG --atleast-pkgconfig-version $PKG_CONFIG_MIN_VERSION; then
        AC_MSG_CHECKING(for $2)

        if $PKG_CONFIG --exists "$2" ; then
            AC_MSG_RESULT(yes)
            succeeded=yes

            AC_MSG_CHECKING($1_CFLAGS)
            $1_CFLAGS=`$PKG_CONFIG --cflags "$2"`
            AC_MSG_RESULT($$1_CFLAGS)

            AC_MSG_CHECKING($1_LIBS)
            $1_LIBS=`$PKG_CONFIG --libs "$2"`
            AC_MSG_RESULT($$1_LIBS)
        else
            $1_CFLAGS=""
            $1_LIBS=""
            ## If we have a custom action on failure, don't print errors, but
            ## do set a variable so people can do so.
            $1_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "$2"`
            ifelse([$4], ,echo $$1_PKG_ERRORS,)
        fi

        AC_SUBST($1_CFLAGS)
        AC_SUBST($1_LIBS)
     fi
  fi
  if test $succeeded = yes; then
     ifelse([$3], , :, [$3])
  else
     ifelse([$4], , AC_MSG_WARN([Library requirements ($2) not met; consider adjusting the PKG_CONFIG_PATH environment variable if your libraries are in a nonstandard prefix so pkg-config can find them.]), [$4])
  fi
])

AC_ARG_VAR(PKGCONFIGFOUND, [Path to pkg-config])
AC_CHECK_PROG(PKGCONFIGFOUND, pkg-config,[yes])

AC_MSG_CHECKING(if koffice-plugin support is wanted)
AC_ARG_ENABLE(koffice-plugin,
[  --enable-koffice-plugin enable koffice plugin],
[if test "$enableval" = yes; then
        AC_MSG_RESULT(yes)
        want_koffice_plugin="yes"
else
        AC_MSG_RESULT(no)
fi], [AC_MSG_RESULT(no); want_koffice_plugin="no"])

KDE_CHECK_HEADER(koDocument.h,
  have_koffice=yes,
  have_koffice=no)

AC_MSG_CHECKING([if kmplayer can be compiled with koffice support])
AC_MSG_RESULT($have_koffice)

AM_CONDITIONAL(include_koffice_support, test "$want_koffice_plugin" = "yes" -a "$have_koffice" = "yes")
if test "$want_koffice_plugin" = "yes" -a "$have_koffice" = "yes"; then
        AC_DEFINE(HAVE_KOFFICE, 1, [If we have koffice installed])
        LIB_KOFFICE="-lkofficecore -lkofficeui"
        AC_SUBST(LIB_KOFFICE)
fi

KDE_CHECK_HEADER(xine.h,
   have_xine=yes,
   have_xine=no)

AC_MSG_CHECKING([if kxineplayer can be compiled])
AC_MSG_RESULT($have_xine)

if test "$have_xine" = "yes"; then
  vers=`xine-config --version 2>/dev/null | awk 'BEGIN { FS = "."; } { printf "%d", ($1 * 1000 + $2) * 1000 + $3;}'`
  if test -n "$vers" && test "$vers" -ge 1000000
  then
        AC_DEFINE(HAVE_XINE, 1, [If we have libxine installed])
        LIB_XINE="`xine-config --libs`"
        AC_SUBST(LIB_XINE)
        CFLAGS_XINE="`xine-config --cflags`"
        AC_SUBST(CFLAGS_XINE)
  else
       have_xine="no"
       AC_MSG_WARN([Your xine installation is too old (1.0.0 or later required)])
  fi
fi

AM_CONDITIONAL(include_kxineplayer, test "$have_xine" = "yes")

AC_ARG_WITH(gstreamer,
    AC_HELP_STRING([--without-gstreamer],[build KMPlayer without GStreamer [default=with]]),
    [build_gstreamer=$withval],
    [build_gstreamer=yes]
)

if test "$build_gstreamer" != "no"; then
    if test "$PKGCONFIGFOUND" = "yes" ; then
        # check for GStreamer
        dnl Now we're ready to ask for gstreamer libs and cflags
        dnl And we can also ask for the right version of gstreamer
        have_gst=no
        have_gst_interfaces=no

        GST_MAJORMINOR=0.8
        GST_REQ=0.8.6

        KDE_PKG_CHECK_MODULES(GST, gstreamer-$GST_MAJORMINOR >= $GST_REQ,
            have_gst=yes,have_gst=no)

        KDE_PKG_CHECK_MODULES(GST_PLUGINS, gstreamer-plugins-$GST_MAJORMINOR >= $GST_REQ, \
            have_gst_plugins=yes,have_gst_plugins=no)
        KDE_PKG_CHECK_MODULES(GST, gstreamer-interfaces-$GST_MAJORMINOR >= $GST_REQ, \
            have_gst_interfaces=yes,have_gst_interfaces=no)

        dnl Give error if we don't have gstreamer
        if test "x$have_gst" = "xno"; then
            LIB_GST=""
            CFLAGS_GST=""
        else
            LIB_GST=$GST_LIBS
            CFLAGS_GST=$GST_CFLAGS
            AC_SUBST(LIB_GST)
            AC_SUBST(CFLAGS_GST)
            AC_SUBST(GST_MAJORMINOR)
            AC_DEFINE(HAVE_GSTREAMER, 1, [have GStreamer])
        fi
    fi
fi
AC_MSG_CHECKING([if kgstplayer can be compiled])
AC_MSG_RESULT($have_gst)

AM_CONDITIONAL(include_kgstplayer, [test x$have_gst = xyes])

KDE_CHECK_BINUTILS

AC_MSG_CHECKING([for KDE version])

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
kdeversion_save_CXXFLAGS="$CXXFLAGS"
kdeversion_safe_LIBS="$LIBS"
LIBS="$LIBS $X_EXTRA_LIBS"
CXXFLAGS="$CXXFLAGS $all_includes"

AC_COMPILE_IFELSE([
#include <kdeversion.h>
#if ! ( KDE_IS_VERSION( 3, 2, 90 ) )
#error KDE 3.2
#endif
],
    need_kde32_compat="no"
,
    need_kde32_compat="yes"
)

AC_COMPILE_IFELSE([
#include <kdeversion.h>
#if ! ( KDE_IS_VERSION( 3, 1, 90 ) )
#error KDE 3.1
#endif
],
    need_kde31_compat="no"
,
    need_kde31_compat="yes"
)

CXXFLAGS="$kdeversion_save_CXXFLAGS"
LIBS="$kdeversion_safe_LIBS"
AC_LANG_RESTORE

if test "$need_kde32_compat" = "yes"; then
    AC_MSG_RESULT([KDE 3.2.x])
fi

if test "$need_kde31_compat" = "yes"; then
    AC_MSG_RESULT([KDE 3.1.x])
fi

AM_CONDITIONAL(need_kde32_compatibility, test "$need_kde32_compat" = "yes")
AM_CONDITIONAL(need_kde31_compatibility, test "$need_kde31_compat" = "yes")

