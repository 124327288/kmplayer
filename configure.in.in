#AM_INIT_AUTOMAKE(kmplayer,0.9.3a)

#KDE_ENABLE_HIDDEN_VISIBILITY

AC_ARG_VAR(PKGCONFIGFOUND, [Path to pkg-config])
AC_CHECK_PROG(PKGCONFIGFOUND, pkg-config,[yes])

AC_MSG_CHECKING(if koffice-plugin support is wanted)
AC_ARG_ENABLE(koffice-plugin,
[  --enable-koffice-plugin enable koffice plugin],
[if test "$enableval" = yes; then
        AC_MSG_RESULT(yes)
        want_koffice_plugin="yes"
else
        AC_MSG_RESULT(no)
fi], [AC_MSG_RESULT(no); want_koffice_plugin="no"])

KDE_CHECK_HEADER(koDocument.h,
  have_koffice=yes,
  have_koffice=no)

AC_MSG_CHECKING([if kmplayer can be compiled with koffice support])
AC_MSG_RESULT($have_koffice)

AM_CONDITIONAL(include_koffice_support, test "$want_koffice_plugin" = "yes" -a "$have_koffice" = "yes")
if test "$want_koffice_plugin" = "yes" -a "$have_koffice" = "yes"; then
        AC_DEFINE(HAVE_KOFFICE, 1, [If we have koffice installed])
        LIB_KOFFICE="-lkofficecore -lkofficeui"
        AC_SUBST(LIB_KOFFICE)
fi

AC_MSG_CHECKING(if expat XML parsing is wanted)
AC_ARG_ENABLE(expat,
[  --enable-expat use expat libs],
[if test "$enableval" = yes; then
        AC_MSG_RESULT(yes)
        want_expat="yes"
else
        AC_MSG_RESULT(no)
fi], [AC_MSG_RESULT(no); want_expat="no"])

KDE_CHECK_HEADER(expat.h,
  have_expat=yes,
  have_expat=no)

AC_MSG_CHECKING([if kmplayer can use expat its XML parser])
AC_MSG_RESULT($have_expat)

AM_CONDITIONAL(include_expat_support, test "$want_expat" = "yes" -a "$have_expat" = "yes")
if test x$have_expat = xyes -a x$want_expat = xyes; then
    AC_DEFINE(HAVE_EXPAT, 1, [If libexpat is installed])
    LIB_EXPAT="-lexpat"
    AC_SUBST(LIB_EXPAT)
fi

KDE_CHECK_HEADER(xine.h,
   have_xine=yes,
   have_xine=no)

AC_MSG_CHECKING([if kxineplayer can be compiled])
AC_MSG_RESULT($have_xine)

AC_ARG_WITH(xine,
    AC_HELP_STRING([--without-xine],[build KMPlayer without Xine [default=with]]),
    [build_xine=$withval],
    [build_xine=yes]
)

if test "$build_xine" != "no"; then
    if test "$have_xine" = "yes"; then
      vers=`xine-config --version 2>/dev/null | awk 'BEGIN { FS = "."; } { printf "%d", ($1 * 1000 + $2) * 1000 + $3;}'`
      if test -n "$vers" && test "$vers" -ge 1000000
      then
            AC_DEFINE(HAVE_XINE, 1, [If we have libxine installed])
            LIB_XINE="`xine-config --libs`"
            AC_SUBST(LIB_XINE)
            CFLAGS_XINE="`xine-config --cflags`"
            AC_SUBST(CFLAGS_XINE)
      else
           have_xine="no"
           AC_MSG_WARN([Your xine installation is too old (1.0.0 or later required)])
      fi
    fi
else
    have_xine="no"
fi

AM_CONDITIONAL(include_kxineplayer, test "$have_xine" = "yes")

AC_ARG_WITH(gstreamer,
    AC_HELP_STRING([--without-gstreamer],[build KMPlayer without GStreamer [default=with]]),
    [build_gstreamer=$withval],
    [build_gstreamer=yes]
)

if test "$build_gstreamer" != "no"; then
    if test "$PKGCONFIGFOUND" = "yes" ; then
        # check for GStreamer
        dnl Now we're ready to ask for gstreamer libs and cflags
        dnl And we can also ask for the right version of gstreamer

        GST_MAJORMINOR=0.10
        GST_REQ=0.10.0

        PKG_CHECK_MODULES(GST, gstreamer-$GST_MAJORMINOR >= $GST_REQ,
            have_gst=yes,have_gst=no)

        PKG_CHECK_MODULES(GST_PLUGINS, gstreamer-plugins-base-$GST_MAJORMINOR >= $GST_REQ, \
            have_gst_plugins=yes,have_gst_plugins=no)
        LIB_GST=""
        CFLAGS_GST=""
        LIB_GST_PLUGINS=""
        dnl Give error if we don't have gstreamer
        if test "x$have_gst" = "xyes"; then
            AC_SUBST(GST_MAJORMINOR)
            AC_DEFINE(HAVE_GSTREAMER, 1, [have GStreamer])
            LIB_GST=$GST_LIBS
            CFLAGS_GST=$GST_CFLAGS
            LIB_GST_PLUGINS=$GST_INTERFACES_LIBS
        fi
        AC_SUBST(LIB_GST)
        AC_SUBST(CFLAGS_GST)
        AC_SUBST(LIB_GST_PLUGINS)
    fi
fi
AC_MSG_CHECKING([if kgstplayer can be compiled])
if test "x$have_gst" = "xyes" && test "x$have_gst_plugins" = "xyes"; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AM_CONDITIONAL(include_kgstplayer, [test "x$have_gst" = "xyes" && test "x$have_gst_plugins" = "xyes"])

hacairo=no
LIBCAIRO_LIBS=""
LIBCAIRO_CFLAGS=""
COMPILE_CAIRO=no
AC_ARG_ENABLE(cairo, [  --enable-cairo     Enables building with cairo support],
[if test "x$enable_cairo" = "xyes" || test "x$enable_cairo" = "xfull"; then
        COMPILE_CAIRO=yes
        AC_MSG_CHECKING([Checking for cairo with pkg-config])
        if test -n "$PKG_CONFIG"; then
                LIBCAIRO_LIBS="`$PKG_CONFIG cairo --libs`"
                LIBCAIRO_CFLAGS="`$PKG_CONFIG cairo --cflags`"
                if test -n "$LIBCAIRO_LIBS" || test -n "$LIBCAIRO_CFLAGS"; then
                        AC_MSG_RESULT([found])
                        hacairo=yes
                else
                        AC_MSG_RESULT([not found])
                fi
        else
                AC_MSG_RESULT([failed: pkg-config not found])
        fi
        if test $hacairo = yes; then
                LIBART_LIBS=""
                LIBART_CFLAGS=""
                AC_DEFINE_UNQUOTED(HAVE_CAIRO, 1, [Defines if your system has the cairo library])
        else
                libmissing cairo optional
                AC_MSG_WARN([Couldn't find a usable cairo])
        fi
fi])
AM_CONDITIONAL(COMPILE_CAIRO, test x$COMPILE_CAIRO = xyes)
AC_SUBST(LIBCAIRO_LIBS)
AC_SUBST(LIBCAIRO_CFLAGS)

KDE_CHECK_BINUTILS

AC_MSG_CHECKING([for KDE version])

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
kdeversion_save_CXXFLAGS="$CXXFLAGS"
kdeversion_safe_LIBS="$LIBS"
LIBS="$LIBS $X_EXTRA_LIBS"
CXXFLAGS="$CXXFLAGS $all_includes"

AC_COMPILE_IFELSE([
#include <kdeversion.h>
#if ! ( KDE_IS_VERSION( 3, 3, 91 ) )
#error KDE 3.3
#endif
],
    need_kde33_compat="no"
,
    need_kde33_compat="yes"
)

AC_COMPILE_IFELSE([
#include <kdeversion.h>
#if ! ( KDE_IS_VERSION( 3, 2, 90 ) )
#error KDE 3.2
#endif
],
    need_kde32_compat="no"
,
    need_kde32_compat="yes"
)

AC_COMPILE_IFELSE([
#include <kdeversion.h>
#if ! ( KDE_IS_VERSION( 3, 1, 90 ) )
#error KDE 3.1
#endif
],
    need_kde31_compat="no"
,
    need_kde31_compat="yes"
)

CXXFLAGS="$kdeversion_save_CXXFLAGS"
LIBS="$kdeversion_safe_LIBS"
AC_LANG_RESTORE

if test "$need_kde32_compat" = "yes"; then
    AC_MSG_RESULT([KDE 3.2.x])
fi

if test "$need_kde31_compat" = "yes"; then
    AC_MSG_RESULT([KDE 3.1.x])
fi

AM_CONDITIONAL(need_kde33_compatibility, test "$need_kde33_compat" = "yes")
AM_CONDITIONAL(need_kde32_compatibility, test "$need_kde32_compat" = "yes")
AM_CONDITIONAL(need_kde31_compatibility, test "$need_kde31_compat" = "yes")

